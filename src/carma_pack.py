__author__ = 'Brandon C. Kelly'

import numpy as np
import samplers

class CarSample(samplers.MCMCSample):
    """
    Class for storing and analyzing the MCMC samples of a CAR(p) model.
    """
    def __init__(self, time, y, ysig, filename=None):
        """
        Constructor for the class. Right same as its superclass.

        :param filename: A string of the name of the file containing the MCMC samples generated by carpack.
        """
        self.time = time  # The time values of the time series
        self.y = y  # The measured values of the time series
        self.ysig = ysig  # The standard deviation of the measurement errors of the time series
        samplers.MCMCSample.__init__(filename=filename)

    def generate_from_file(self, filename):
        """
        Build the dictionary of parameter samples from an ascii file of MCMC samples from carpack.

        :param filename: The name of the file containing the MCMC samples generated by carpack.
        """
        # TODO: put in exceptions to make sure files are ready correctly
        # Grab the MCMC output
        trace = np.genfromtxt(filename, skip_header=1)

        # Figure out how many AR terms we have
        p = trace.shape[1] - 3
        names = ['logpost', 'var', 'measerr_scale', 'log_centroid', 'log_width']
        if names != self._samples.keys():
            # Parameters are not already in the dictionary, add them.
            self._samples['logpost'] = trace[:, 0]  # log-posterior of the CAR(p) model
            self._samples['var'] = trace[:, 1]  # Variance of the CAR(p) process
            self._samples['measerr_scale'] = trace[:, 2]  # Measurement errors are scaled by this much.
            ar_index = np.arange(0, p, 2)
            # The centroids and widths of the quasi-periodic oscillations, i.e., of the Lorentzians characterizing
            # the power spectrum. Note that these are equal to -1 / 4 * pi times the imaginary and real parts of the
            # roots of the AR(p) characteristic polynomial, respectively.
            self._samples['log_centroid'] = trace[:, 3 + ar_index]
            self._samples['log_width'] = trace[:, 4 + ar_index]
    
    def sigma_noise(self, var=None, qpo_centroid=None, qpo_width=None):
        """
        Return the standard deviation of the white noise driving process. If no inputs are supplied, then the output is
        a numpy array containing the values calculated from all of the MCMC samples. Otherwise, the returned values are
        calculated only for the input values. Note that if one input is provided, then all of them must be.

        :param var: The variance of the CAR(p) process, a numpy array.
        :param qpo_centroid: The centroid of the lorentzians defining the power spectrum.
        :param qso_width: The widths of the lorentzians defining the power spectrum.
        """
        pass

    def kalman_filter(self, var, qpo_centroid, qpo_width):
        """
        Return the Kalman Filter for the input CAR(p) parameters.

        :param var: The variance of the CAR(p) process, a scalar.
        :param qpo_centroid: The centroid of the CAR(p) lorentzians.
        :param qpo_width: The centroid of the CAR(p) lorentzians.
        """
        pass

    def power_spectrum(self, freq, var, qpo_centroid, qpo_width):
        """
        Return the power spectrum for a CAR(p) process calculated at the input frequencies.

        :rtype : A numpy array.
        :param freq: The frequencies at which to calculate the PSD.
        :param var: The variance of the CAR(p) process.
        :param qpo_centroid: The centroids of the CAR(p) lorentzians.
        :param qpo_width: The widths of the CAR(p) lorentzians.
        """
        pass

    def plot_power_spectrum(self, percentile=68.0):
        """
        Plot the posterior median and the credibility interval corresponding to percentile of the CAR(p) PSD.
        
        :param percentile: The percentile of the PSD credibility interval to plot.
        """
        pass

    def assess_fit(self, bestfit="MAP"):
        """
        Display plots and provide useful information for assessing the quality of the CAR(p) model fit.

        :param bestfit: A string specifying how to define 'best-fit'. Can be the Maximum Posterior (MAP), the posterior
            mean ("mean") or the posterior median ("median").
        """
        pass